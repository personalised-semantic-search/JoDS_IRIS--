/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.deri.iris.parser.lexer;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PushbackReader;

import org.deri.iris.parser.node.EOF;
import org.deri.iris.parser.node.TTAnd;
import org.deri.iris.parser.node.TTBinOp;
import org.deri.iris.parser.node.TTBlank;
import org.deri.iris.parser.node.TTComma;
import org.deri.iris.parser.node.TTComment;
import org.deri.iris.parser.node.TTDash;
import org.deri.iris.parser.node.TTDec;
import org.deri.iris.parser.node.TTDot;
import org.deri.iris.parser.node.TTEq;
import org.deri.iris.parser.node.TTId;
import org.deri.iris.parser.node.TTImpliedby;
import org.deri.iris.parser.node.TTInt;
import org.deri.iris.parser.node.TTLpar;
import org.deri.iris.parser.node.TTNot;
import org.deri.iris.parser.node.TTPosint;
import org.deri.iris.parser.node.TTPreBase64;
import org.deri.iris.parser.node.TTPreBoolean;
import org.deri.iris.parser.node.TTPreDate;
import org.deri.iris.parser.node.TTPreDatetime;
import org.deri.iris.parser.node.TTPreDecimal;
import org.deri.iris.parser.node.TTPreDouble;
import org.deri.iris.parser.node.TTPreDuration;
import org.deri.iris.parser.node.TTPreFloat;
import org.deri.iris.parser.node.TTPreGday;
import org.deri.iris.parser.node.TTPreGmonth;
import org.deri.iris.parser.node.TTPreGmonthday;
import org.deri.iris.parser.node.TTPreGyear;
import org.deri.iris.parser.node.TTPreGyearmonth;
import org.deri.iris.parser.node.TTPreHex;
import org.deri.iris.parser.node.TTPreInteger;
import org.deri.iris.parser.node.TTPreIri;
import org.deri.iris.parser.node.TTPreSqname;
import org.deri.iris.parser.node.TTPreString;
import org.deri.iris.parser.node.TTPreTime;
import org.deri.iris.parser.node.TTQuery;
import org.deri.iris.parser.node.TTRpar;
import org.deri.iris.parser.node.TTSq;
import org.deri.iris.parser.node.TTStr;
import org.deri.iris.parser.node.TTTerOp;
import org.deri.iris.parser.node.TTUnders;
import org.deri.iris.parser.node.TTVariable;
import org.deri.iris.parser.node.Token;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTBlank(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTDash(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTComment(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTDot(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTImpliedby(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTAnd(line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTNot(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTComma(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTLpar(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTRpar(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTUnders(line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTVariable(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTQuery(line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTId(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTBinOp(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTTerOp(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTEq(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTInt(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPosint(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTDec(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTStr(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTSq(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreInteger(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreString(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreDecimal(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreDouble(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreFloat(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreBase64(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreBoolean(line, pos); }
    Token new29(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreDate(line, pos); }
    Token new30(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreDatetime(line, pos); }
    Token new31(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreDuration(line, pos); }
    Token new32(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreGday(line, pos); }
    Token new33(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreGmonthday(line, pos); }
    Token new34(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreGmonth(line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreGyearmonth(line, pos); }
    Token new36(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreGyear(line, pos); }
    Token new37(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreHex(line, pos); }
    Token new38(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreIri(line, pos); }
    Token new39(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreSqname(line, pos); }
    Token new40(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTPreTime(line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 2}, {32, 32, 3}, {33, 33, 4}, {34, 34, 5}, {35, 35, 6}, {37, 37, 7}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 57, 17}, {58, 58, 18}, {60, 60, 19}, {61, 61, 20}, {62, 62, 21}, {63, 63, 22}, {64, 64, 23}, {65, 90, 24}, {95, 95, 25}, {97, 97, 26}, {98, 109, 27}, {110, 110, 28}, {111, 122, 27}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 29}, },
            {{0, 33, 30}, {34, 34, 31}, {35, 38, 30}, {40, 91, 30}, {92, 92, 32}, {93, 65535, 30}, },
            {},
            {},
            {{0, 33, 33}, {35, 38, 33}, {39, 39, 34}, {40, 91, 33}, {92, 92, 35}, {93, 65535, 33}, },
            {},
            {},
            {},
            {},
            {},
            {{46, 46, 36}, {48, 57, 37}, },
            {{48, 57, 38}, },
            {{42, 42, 39}, {47, 47, 40}, },
            {{35, 35, 41}, {46, 46, 36}, {48, 57, 17}, {65, 90, 42}, {97, 122, 43}, },
            {{45, 45, 44}, },
            {{61, 61, 45}, },
            {},
            {{61, 61, 46}, },
            {{45, 45, 47}, {48, 57, 48}, {65, 90, 49}, {97, 122, 50}, },
            {{65, 90, 51}, {97, 122, 52}, },
            {{35, 35, 41}, {48, 57, 53}, {65, 90, 54}, {95, 95, 55}, {97, 122, 56}, },
            {{98, 98, 57}, {100, 100, 58}, {102, 102, 59}, {103, 103, 60}, {104, 104, 61}, {105, 105, 62}, {115, 115, 63}, {116, 116, 64}, },
            {{35, 95, -26}, {97, 109, 56}, {110, 110, 65}, {111, 122, 56}, },
            {{35, 122, -26}, },
            {{35, 95, -26}, {97, 97, 66}, {98, 110, 56}, {111, 111, 67}, {112, 122, 56}, },
            {},
            {{0, 65535, -7}, },
            {},
            {{0, 33, 30}, {34, 34, 68}, {35, 38, 30}, {39, 39, 69}, {40, 65535, -7}, },
            {{0, 65535, -10}, },
            {},
            {{0, 33, 33}, {34, 34, 70}, {35, 38, 33}, {39, 39, 71}, {40, 65535, -10}, },
            {{48, 57, 38}, },
            {{46, 57, -16}, },
            {{48, 57, 38}, },
            {{0, 41, 72}, {42, 42, 73}, {43, 65535, 72}, },
            {{0, 9, 74}, {10, 10, 75}, {11, 12, 74}, {13, 13, 75}, {14, 65535, 74}, },
            {{48, 57, 76}, {65, 90, 77}, {97, 122, 78}, },
            {{35, 35, 41}, {48, 57, 79}, {65, 122, -19}, },
            {{35, 122, -44}, },
            {},
            {},
            {},
            {},
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 122, -24}, },
            {{48, 57, 80}, {65, 90, 81}, {95, 95, 55}, {97, 122, 82}, },
            {{48, 122, -53}, },
            {{35, 122, -26}, },
            {{35, 122, -26}, },
            {{48, 122, -53}, },
            {{35, 122, -26}, },
            {{97, 97, 83}, {111, 111, 84}, },
            {{97, 97, 85}, {101, 101, 86}, {111, 111, 87}, {117, 117, 88}, },
            {{108, 108, 89}, },
            {{100, 100, 90}, {109, 109, 91}, {121, 121, 92}, },
            {{101, 101, 93}, },
            {{110, 110, 94}, {114, 114, 95}, },
            {{113, 113, 96}, {116, 116, 97}, },
            {{105, 105, 98}, },
            {{35, 95, -26}, {97, 99, 56}, {100, 100, 99}, {101, 122, 56}, },
            {{35, 95, -26}, {97, 101, 56}, {102, 102, 100}, {103, 122, 56}, },
            {{35, 95, -26}, {97, 115, 56}, {116, 116, 101}, {117, 122, 56}, },
            {{0, 33, 102}, {34, 34, 31}, {35, 38, 102}, {40, 91, 102}, {92, 92, 103}, {93, 65535, 102}, },
            {{0, 65535, -70}, },
            {{0, 33, 104}, {35, 38, 104}, {39, 39, 34}, {40, 91, 104}, {92, 92, 105}, {93, 65535, 104}, },
            {{0, 65535, -72}, },
            {{0, 65535, -41}, },
            {{0, 46, 106}, {47, 47, 107}, {48, 65535, 106}, },
            {{0, 65535, -42}, },
            {{10, 10, 75}, {13, 13, 75}, },
            {{48, 122, -43}, },
            {{48, 122, -43}, },
            {{48, 122, -43}, },
            {{35, 122, -44}, },
            {{48, 122, -53}, },
            {{48, 122, -53}, },
            {{48, 122, -53}, },
            {{115, 115, 108}, },
            {{111, 111, 109}, },
            {{116, 116, 110}, },
            {{99, 99, 111}, },
            {{117, 117, 112}, },
            {{114, 114, 113}, },
            {{111, 111, 114}, },
            {{97, 97, 115}, },
            {{111, 111, 116}, },
            {{101, 101, 117}, },
            {{120, 120, 118}, },
            {{116, 116, 119}, },
            {{105, 105, 120}, },
            {{110, 110, 121}, },
            {{114, 114, 122}, },
            {{109, 109, 123}, },
            {{35, 122, -26}, },
            {{35, 122, -26}, },
            {{35, 122, -26}, },
            {{0, 65535, -70}, },
            {{0, 33, 102}, {34, 34, 68}, {35, 38, 102}, {39, 39, 69}, {40, 65535, -70}, },
            {{0, 65535, -72}, },
            {{0, 33, 104}, {34, 34, 70}, {35, 38, 104}, {39, 39, 71}, {40, 65535, -72}, },
            {{0, 41, 124}, {42, 42, 73}, {43, 65535, 124}, },
            {},
            {{101, 101, 125}, },
            {{108, 108, 126}, },
            {{101, 101, 127}, },
            {{105, 105, 128}, },
            {{98, 98, 129}, },
            {{97, 97, 130}, },
            {{97, 97, 131}, },
            {{121, 121, 132}, },
            {{110, 110, 133}, },
            {{97, 97, 134}, },
            {{98, 98, 135}, },
            {{101, 101, 136}, },
            {},
            {{97, 97, 137}, },
            {{105, 105, 138}, },
            {{101, 101, 139}, },
            {{0, 65535, -108}, },
            {{54, 54, 140}, },
            {{101, 101, 141}, },
            {{116, 116, 142}, },
            {{109, 109, 143}, },
            {{108, 108, 144}, },
            {{116, 116, 145}, },
            {{116, 116, 146}, },
            {},
            {{116, 116, 147}, },
            {{114, 114, 148}, },
            {{105, 105, 149}, },
            {{103, 103, 150}, },
            {{109, 109, 151}, },
            {{110, 110, 152}, },
            {},
            {{52, 52, 153}, },
            {{97, 97, 154}, },
            {{105, 105, 155}, },
            {{97, 97, 156}, },
            {{101, 101, 157}, },
            {{105, 105, 158}, },
            {},
            {{104, 104, 159}, },
            {{109, 109, 160}, },
            {{110, 110, 161}, },
            {{101, 101, 162}, },
            {{101, 101, 163}, },
            {{103, 103, 164}, },
            {{98, 98, 165}, },
            {{110, 110, 166}, },
            {{109, 109, 167}, },
            {{108, 108, 168}, },
            {},
            {{111, 111, 169}, },
            {{100, 100, 170}, },
            {{111, 111, 171}, },
            {{97, 97, 172}, },
            {{114, 114, 173}, },
            {},
            {},
            {{105, 105, 174}, },
            {},
            {{101, 101, 175}, },
            {},
            {{110, 110, 176}, },
            {{97, 97, 177}, },
            {{110, 110, 178}, },
            {{114, 114, 179}, },
            {},
            {{110, 110, 180}, },
            {},
            {},
            {{121, 121, 181}, },
            {{116, 116, 182}, },
            {{121, 121, 183}, },
            {{97, 97, 184}, },
            {},
            {{104, 104, 185}, },
            {},
            {{114, 114, 186}, },
            {},
            {{121, 121, 187}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 6, -1, 1, 15, -1, 8, 9, 15, 15, 7, 15, 3, 15, 17, -1, 14, 16, 14, -1, -1, 13, 10, 13, 13, 13, 14, -1, 20, -1, -1, 20, -1, -1, 17, 19, -1, 2, -1, -1, -1, 4, 14, 14, 12, 11, 11, 11, 13, 13, 13, 13, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, 13, 13, 13, 20, -1, -1, 20, -1, -1, 2, 2, 21, 21, 21, -1, 13, 13, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 6, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, 26, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, 34, -1, -1, -1, 39, 23, -1, 28, -1, 24, -1, -1, -1, -1, 22, -1, 30, 31, -1, -1, -1, -1, 33, -1, 37, -1, 35, -1, 27, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
